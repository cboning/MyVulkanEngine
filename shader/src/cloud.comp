#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0, r32f) uniform writeonly image3D outputImage;
// 柏林噪声实现
float hash(vec3 p) {
    p = fract(p * 0.3183948 + vec3(0.1,0.2,0.3));
    p *= 17.0;
    return fract(p.x * p.y * p.z * (p.x + p.y + p.z));
}

float lerp(float a, float b, float t) {
    return a + t * (b - a);
}

vec3 fade(vec3 t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float perlinNoise(vec3 p) {
    vec3 pi = floor(p);
    vec3 pf = fract(p);

    float c000 = hash(pi + vec3(0.0, 0.0, 0.0));
    float c100 = hash(pi + vec3(1.0, 0.0, 0.0));
    float c010 = hash(pi + vec3(0.0, 1.0, 0.0));
    float c110 = hash(pi + vec3(1.0, 1.0, 0.0));
    float c001 = hash(pi + vec3(0.0, 0.0, 1.0));
    float c101 = hash(pi + vec3(1.0, 0.0, 1.0));
    float c011 = hash(pi + vec3(0.0, 1.0, 1.0));
    float c111 = hash(pi + vec3(1.0, 1.0, 1.0));

    vec3 f = fade(pf);

    float x00 = lerp(c000, c100, f.x);
    float x10 = lerp(c010, c110, f.x);
    float x01 = lerp(c001, c101, f.x);
    float x11 = lerp(c011, c111, f.x);

    float y0 = lerp(x00, x10, f.y);
    float y1 = lerp(x01, x11, f.y);

    return lerp(y0, y1, f.z);
}

void main() {
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);
    vec3 normPos = vec3(pos) / vec3(imageSize(outputImage));
    float scale = 10.0; // 控制噪声频率
    float value = perlinNoise(normPos * scale);

    imageStore(outputImage, pos, vec4(value, 0.0, 0.0, 1.0));
}
